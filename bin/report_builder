#!/usr/bin/env ruby

require 'optparse'
require 'report_builder'

options = {
    :json_path => nil,
    :report_path => 'test_report',
    :report_types => [:html],
    :report_tabs => [:overview, :features],
    :report_title => 'Test Results',
    :compress_images => false,
    :additional_info => {}
    }

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: \n     report_builder [options]"
  opts.separator 'Configuration options:'

  opts.on('-s','--source x,y,z', Array, 'List of json path or files') do |list|
    options[:json_path] = list
  end

  opts.on('-o', '--out [PATH]NAME', String, 'Report path with name without extension') do |report_path|
    options[:report_path] = report_path
  end

  opts.on('--json_out [PATH]NAME', String, 'Report path for json report with name without extension') do |report_path|
    options[:json_report_path] = report_path
  end

  opts.on('--html_out [PATH]NAME', String, 'Report path for html report with name without extension') do |report_path|
    options[:html_report_path] = report_path
  end

  opts.on('--retry_out [PATH]NAME', String, 'Report path for retry report with name without extension') do |report_path|
    options[:retry_report_path] = report_path
  end

  opts.on('-f','--format x,y,z', Array, 'List of report format - html,json,retry') do |list|
    options[:report_types] = list
  end

  opts.on('-t','--tabs x,y,z', Array, 'List of report tabs - overview,features,scenarios,errors') do |list|
    options[:report_tabs] = list
  end

  opts.on('-c', '--compress', 'Reduce report size if embedding images') do |compress|
    options[:compress_images] = compress
  end

  opts.on('-T', '--title TITLE', String, 'Report title') do |report_title|
    options[:report_title] = report_title
  end

  opts.on('-I','--info a:x,b:y,c:z', Array, 'List of additional info') do |list|
    list.each do |i|
      key, value = i.split(':')
      options[:additional_info][key] = value
    end
  end

  opts.separator 'Common options:'

  opts.on_tail('-h', '--help', 'Show help') do
    puts opts
    exit
  end

  opts.on_tail('-v','--version', 'Show version') do
    puts 'ReportBuilder v' + Gem.loaded_specs['report_builder'].version.to_s rescue puts "Something want wrong. \nUse 'gem list report_builder'"
    exit
  end
end

opt_parser.parse!(ARGV)

ReportBuilder.build_report options
