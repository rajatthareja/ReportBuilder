#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/report_builder'

options = { }

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: \n     report_builder [options]"
  opts.separator 'Configuration options:'

  opts.on('-s', '--source x,y,z', Array, 'List of json path or files') do |list|
    options[:input_path] = list
  end

  opts.on('-g', '--groups a:x,b:y,c:z', Array, 'List of grouped feature mappings') do |list|
    options[:json_path] = { }
    list.each do |i|
      key, value = i.split(':', 2)
      options[:json_path][key] = value
    end
  end

  opts.on('-o', '--out [PATH]NAME', String, 'Report path with name without extension') do |report_path|
    options[:report_path] = report_path
  end

  opts.on('--json_out [PATH]NAME', String, 'Report path for json report with name without extension') do |report_path|
    options[:json_report_path] = report_path
  end

  opts.on('--html_out [PATH]NAME', String, 'Report path for html report with name without extension') do |report_path|
    options[:html_report_path] = report_path
  end

  opts.on('--retry_out [PATH]NAME', String, 'Report path for retry report with name without extension') do |report_path|
    options[:retry_report_path] = report_path
  end

  opts.on('-f', '--format x,y,z', Array, 'List of report format - html,json,retry') do |list|
    options[:report_types] = list
  end

  opts.on('--[no-]images', 'Reduce HTML report size by excluding embedded images') do |include_images|
    options[:include_images] = include_images
  end

  opts.on('--voice_commands', 'Enable voice commands for easy navigation and search') do |voice_commands|
    options[:voice_commands] = voice_commands
  end

  opts.on('-c', '--color COLOR', String, 'Report color') do |color|
    options[:color] = color
  end

  opts.on('-T', '--title TITLE', String, 'Report title') do |report_title|
    options[:report_title] = report_title
  end

  opts.on('-I', '--info a:x,b:y,c:z', Array, 'List of additional info') do |list|
    options[:additional_info] = { }
    list.each do |i|
      key, value = i.split(':', 2)
      options[:additional_info][key] = value
    end
  end

  opts.on('--css CSS', String, 'Additional CSS string or CSS file path or CSS file url for customizing html report') do |additional_css|
    options[:additional_css] = additional_css
  end

  opts.on('--js JS', String, 'Additional JS string or JS file path or JS file url for customizing html report') do |additional_js|
    options[:additional_js] = additional_js
  end

  opts.separator 'Common options:'

  opts.on_tail('-h', '--help', 'Show help') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'Show version') do
    puts 'ReportBuilder v' + Gem.loaded_specs['report_builder'].version.to_s rescue puts "Something want wrong. \nUse 'gem list report_builder'"
    exit
  end
end

opt_parser.parse!(ARGV)

ReportBuilder.build_report options
